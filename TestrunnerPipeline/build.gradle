plugins {
    id 'com.palantir.docker' version '0.9.2'
    id 'com.palantir.docker-run' version '0.9.2'
}

apply plugin: 'groovy'
apply from: 'gradle/sync-plugins.gradle'

ext {
    def ws = project.hasProperty('workspace') ? project.property('workspace') : System.getenv('WORKSPACE_HOME')
    workspace = relativeToProject(ws as File).toString()
}

jenkinsRemote {
    url = 'http://localhost:8080'
    username = 'admin'
    password = '553aa101b0a642b0a70be0889d080712'
}

sourceSets {
    jobs {
        groovy {
            srcDirs 'jobs'
            compileClasspath += main.compileClasspath
        }
    }
}

repositories {
    jcenter()
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
}

dependencies {
    compile 'org.jenkins-ci.plugins:job-dsl-core:1.54'
}

task installPlugins(type: Copy) {
    Dependency[] plugins = []
    project.file("plugins.txt").eachLine {
         plugins += project.dependencies.module("$it")
    }

    def pluginConfig = project.configurations.detachedConfiguration(plugins)

    from pluginConfig
    into "$buildDir/docker/plugins"
}

task preparePipeline(type: Copy) {
    from "$projectDir/src"
    into "$buildDir/docker/src"
}

ext {
    imageName = 'de.set/jenkins-ci'
}

docker {
    name project.imageName
    dependsOn installPlugins, preparePipeline
    dockerfile 'Dockerfile'
    files "$projectDir/docker"
}

dockerRun {
    name 'test-jenkins'
    image project.imageName
    volumes "$workspace": '/tmp/ws'
    ports '8080:8080'
}

File relativeToProject(File workspace) {
    projectDir.toPath().relativize(workspace.toPath()).toFile()
}